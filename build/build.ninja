# This is the build file for project "terminal_commander"
# It is autogenerated by the Meson build system.
# Do not edit by hand.

ninja_required_version = 1.5.1

# Rules for compiling.

rule cpp_COMPILER
 command = c++  $ARGS '-MMD' '-MQ' $out '-MF' '$DEPFILE' -o $out -c $in
 deps = gcc
 depfile = $DEPFILE
 description = Compiling cpp object $out

rule cpp_PCH
 command = c++  $ARGS '-MMD' '-MQ' $out '-MF' '$DEPFILE' -o $out -c $in
 deps = gcc
 depfile = $DEPFILE
 description = Precompiling header $in


# Rules for linking.

rule STATIC_LINKER
 command = ar  $LINK_ARGS $out $in
 description = Static linking library $out

rule cpp_LINKER
 command = c++  $ARGS  -o $out $in $LINK_ARGS $aliasing
 description = Linking target $out

rule SHSYM
 command = "/usr/bin/python3" "/usr/share/meson/symbolextractor.py" $in $out $CROSS
 restat = 1
 description = Generating symbol file $out.

# Other rules

rule CUSTOM_COMMAND
 command = $COMMAND
 description = $DESC
 restat = 1

rule REGENERATE_BUILD
 command = '/usr/bin/python3' '/usr/share/meson/meson.py' '/home/luke/git/terminal_commander' '/home/luke/git/terminal_commander/build' --backend ninja secret-handshake
 description = Regenerating build files
 generator = 1


# Phony build target, always out of date
build PHONY: phony

# Build rules for targets

build terminal_commander@sta/src_terminal_commander.cpp.o: cpp_COMPILER ../src/terminal_commander.cpp
 DEPFILE = terminal_commander@sta/src_terminal_commander.cpp.o.d
 ARGS = '-pipe' '-Wall' '-Winvalid-pch' '-std=c++11' '-g' '-D_GNU_SOURCE' '-Iterminal_commander@sta' '-I..' '-I.' '-Iinclude' '-I../include'

build terminal_commander@sta/src_TuiXMLElement.cpp.o: cpp_COMPILER ../src/TuiXMLElement.cpp
 DEPFILE = terminal_commander@sta/src_TuiXMLElement.cpp.o.d
 ARGS = '-pipe' '-Wall' '-Winvalid-pch' '-std=c++11' '-g' '-D_GNU_SOURCE' '-Iterminal_commander@sta' '-I..' '-I.' '-Iinclude' '-I../include'

build terminal_commander@sta/src_tinyxml2.cpp.o: cpp_COMPILER ../src/tinyxml2.cpp
 DEPFILE = terminal_commander@sta/src_tinyxml2.cpp.o.d
 ARGS = '-pipe' '-Wall' '-Winvalid-pch' '-std=c++11' '-g' '-D_GNU_SOURCE' '-Iterminal_commander@sta' '-I..' '-I.' '-Iinclude' '-I../include'

build libterminal_commander.a: STATIC_LINKER terminal_commander@sta/src_terminal_commander.cpp.o terminal_commander@sta/src_TuiXMLElement.cpp.o terminal_commander@sta/src_tinyxml2.cpp.o
 LINK_ARGS = 'csr'

build unit_test@exe/src_unit_test.cpp.o: cpp_COMPILER ../src/unit_test.cpp
 DEPFILE = unit_test@exe/src_unit_test.cpp.o.d
 ARGS = '-pipe' '-Wall' '-Winvalid-pch' '-std=c++11' '-g' '-Iunit_test@exe' '-I..' '-I.' '-Iinclude' '-I../include'

build unit_test: cpp_LINKER unit_test@exe/src_unit_test.cpp.o | libterminal_commander.a
 LINK_ARGS = 'libterminal_commander.a' '-lncursesw'

# Test rules

build test: CUSTOM_COMMAND all PHONY
 COMMAND = '/usr/bin/python3' '/usr/share/meson/meson_test.py' '/home/luke/git/terminal_commander/build/meson-private/meson_test_setup.dat'
 DESC = Running$ test$ suite.
 pool = console

build test-valgrind: CUSTOM_COMMAND all PHONY
 COMMAND = '/usr/bin/python3' '/usr/share/meson/meson_test.py' '/home/luke/git/terminal_commander/build/meson-private/meson_test_setup.dat' '--wrapper=valgrind'
 DESC = Running$ test$ suite$ under$ Valgrind.
 pool = console

# Install rules

build install: CUSTOM_COMMAND  | all
 DESC = Installing$ files.
 COMMAND = '/usr/bin/python3' '/usr/share/meson/meson_install.py' '/home/luke/git/terminal_commander/build/meson-private/install.dat'
 pool = console

# Suffix

build all: phony libterminal_commander.a unit_test

default all

build clean: CUSTOM_COMMAND PHONY
 COMMAND = 'ninja' '-t' 'clean'
 description = 'Cleaning'

build build.ninja: REGENERATE_BUILD ../meson.build meson-private/coredata.dat
 pool = console

build ../meson.build meson-private/coredata.dat: phony 

